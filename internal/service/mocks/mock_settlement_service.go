// Code generated by MockGen. DO NOT EDIT.
// Source: settlement_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trucktrace/internal/models"
)

// MockSettlementService is a mock of SettlementService interface.
type MockSettlementService struct {
	ctrl     *gomock.Controller
	recorder *MockSettlementServiceMockRecorder
}

// MockSettlementServiceMockRecorder is the mock recorder for MockSettlementService.
type MockSettlementServiceMockRecorder struct {
	mock *MockSettlementService
}

// NewMockSettlementService creates a new mock instance.
func NewMockSettlementService(ctrl *gomock.Controller) *MockSettlementService {
	mock := &MockSettlementService{ctrl: ctrl}
	mock.recorder = &MockSettlementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettlementService) EXPECT() *MockSettlementServiceMockRecorder {
	return m.recorder
}

// CreateSettlement mocks base method.
func (m *MockSettlementService) CreateSettlement(settlement models.Settlement) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSettlement", settlement)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSettlement indicates an expected call of CreateSettlement.
func (mr *MockSettlementServiceMockRecorder) CreateSettlement(settlement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSettlement", reflect.TypeOf((*MockSettlementService)(nil).CreateSettlement), settlement)
}

// DeleteSettlement mocks base method.
func (m *MockSettlementService) DeleteSettlement(settlementId int, status, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSettlement", settlementId, status, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSettlement indicates an expected call of DeleteSettlement.
func (mr *MockSettlementServiceMockRecorder) DeleteSettlement(settlementId, status, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSettlement", reflect.TypeOf((*MockSettlementService)(nil).DeleteSettlement), settlementId, status, isActive)
}

// GetAllSettlements mocks base method.
func (m *MockSettlementService) GetAllSettlements(status, isDeleted, isActive string) ([]models.Settlement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSettlements", status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Settlement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSettlements indicates an expected call of GetAllSettlements.
func (mr *MockSettlementServiceMockRecorder) GetAllSettlements(status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSettlements", reflect.TypeOf((*MockSettlementService)(nil).GetAllSettlements), status, isDeleted, isActive)
}

// GetSettlementById mocks base method.
func (m *MockSettlementService) GetSettlementById(settlementId int, status, isDeleted, isActive string) (models.Settlement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettlementById", settlementId, status, isDeleted, isActive)
	ret0, _ := ret[0].(models.Settlement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettlementById indicates an expected call of GetSettlementById.
func (mr *MockSettlementServiceMockRecorder) GetSettlementById(settlementId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettlementById", reflect.TypeOf((*MockSettlementService)(nil).GetSettlementById), settlementId, status, isDeleted, isActive)
}

// UpdateSettlement mocks base method.
func (m *MockSettlementService) UpdateSettlement(settlementId int, settlement models.SettlementUpdateInput, status, isDeleted, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSettlement", settlementId, settlement, status, isDeleted, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSettlement indicates an expected call of UpdateSettlement.
func (mr *MockSettlementServiceMockRecorder) UpdateSettlement(settlementId, settlement, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettlement", reflect.TypeOf((*MockSettlementService)(nil).UpdateSettlement), settlementId, settlement, status, isDeleted, isActive)
}
