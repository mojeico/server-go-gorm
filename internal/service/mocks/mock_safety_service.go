// Code generated by MockGen. DO NOT EDIT.
// Source: safety_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trucktrace/internal/models"
)

// MockSafetyService is a mock of SafetyService interface.
type MockSafetyService struct {
	ctrl     *gomock.Controller
	recorder *MockSafetyServiceMockRecorder
}

// MockSafetyServiceMockRecorder is the mock recorder for MockSafetyService.
type MockSafetyServiceMockRecorder struct {
	mock *MockSafetyService
}

// NewMockSafetyService creates a new mock instance.
func NewMockSafetyService(ctrl *gomock.Controller) *MockSafetyService {
	mock := &MockSafetyService{ctrl: ctrl}
	mock.recorder = &MockSafetyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSafetyService) EXPECT() *MockSafetyServiceMockRecorder {
	return m.recorder
}

// CreateSafety mocks base method.
func (m *MockSafetyService) CreateSafety(safety models.Safety) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSafety", safety)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSafety indicates an expected call of CreateSafety.
func (mr *MockSafetyServiceMockRecorder) CreateSafety(safety interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSafety", reflect.TypeOf((*MockSafetyService)(nil).CreateSafety), safety)
}

// DeleteSafety mocks base method.
func (m *MockSafetyService) DeleteSafety(safetyId int, companyId, status, isDeleted, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSafety", safetyId, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSafety indicates an expected call of DeleteSafety.
func (mr *MockSafetyServiceMockRecorder) DeleteSafety(safetyId, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSafety", reflect.TypeOf((*MockSafetyService)(nil).DeleteSafety), safetyId, companyId, status, isDeleted, isActive)
}

// GetAllSafeties mocks base method.
func (m *MockSafetyService) GetAllSafeties(status, isDeleted, isActive string) ([]models.Safety, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSafeties", status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Safety)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSafeties indicates an expected call of GetAllSafeties.
func (mr *MockSafetyServiceMockRecorder) GetAllSafeties(status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSafeties", reflect.TypeOf((*MockSafetyService)(nil).GetAllSafeties), status, isDeleted, isActive)
}

// GetAllSafetiesByCompanyId mocks base method.
func (m *MockSafetyService) GetAllSafetiesByCompanyId(companyId, status, isDeleted, isActive string) ([]models.Safety, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSafetiesByCompanyId", companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Safety)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSafetiesByCompanyId indicates an expected call of GetAllSafetiesByCompanyId.
func (mr *MockSafetyServiceMockRecorder) GetAllSafetiesByCompanyId(companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSafetiesByCompanyId", reflect.TypeOf((*MockSafetyService)(nil).GetAllSafetiesByCompanyId), companyId, status, isDeleted, isActive)
}

// GetSafetyById mocks base method.
func (m *MockSafetyService) GetSafetyById(safetyId int, companyId, status, isDeleted, isActive string) (models.Safety, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSafetyById", safetyId, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(models.Safety)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSafetyById indicates an expected call of GetSafetyById.
func (mr *MockSafetyServiceMockRecorder) GetSafetyById(safetyId, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSafetyById", reflect.TypeOf((*MockSafetyService)(nil).GetSafetyById), safetyId, companyId, status, isDeleted, isActive)
}

// UpdateSafety mocks base method.
func (m *MockSafetyService) UpdateSafety(safetyId int, safetyInput models.SafetyInputUpdate, companyId, status, isDeleted, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSafety", safetyId, safetyInput, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSafety indicates an expected call of UpdateSafety.
func (mr *MockSafetyServiceMockRecorder) UpdateSafety(safetyId, safetyInput, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSafety", reflect.TypeOf((*MockSafetyService)(nil).UpdateSafety), safetyId, safetyInput, companyId, status, isDeleted, isActive)
}
