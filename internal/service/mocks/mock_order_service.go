// Code generated by MockGen. DO NOT EDIT.
// Source: order_service.go
// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trucktrace/internal/models"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(order models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), order)
}

// DeleteOrder mocks base method.
func (m *MockOrderService) DeleteOrder(id, companyId int, status, isDeleted, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", id, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceMockRecorder) DeleteOrder(id, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderService)(nil).DeleteOrder), id, companyId, status, isDeleted, isActive)
}

// GetAllOrders mocks base method.
func (m *MockOrderService) GetAllOrders(status, isDeleted, isActive string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderServiceMockRecorder) GetAllOrders(status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderService)(nil).GetAllOrders), status, isDeleted, isActive)
}

// GetAllOrdersByCompanyId mocks base method.
func (m *MockOrderService) GetAllOrdersByCompanyId(companyId int, status, isDeleted, isActive string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersByCompanyId", companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrdersByCompanyId indicates an expected call of GetAllOrdersByCompanyId.
func (mr *MockOrderServiceMockRecorder) GetAllOrdersByCompanyId(companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersByCompanyId", reflect.TypeOf((*MockOrderService)(nil).GetAllOrdersByCompanyId), companyId, status, isDeleted, isActive)
}

// GetOrderById mocks base method.
func (m *MockOrderService) GetOrderById(id, companyId int, status, isDeleted, isActive string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", id, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderServiceMockRecorder) GetOrderById(id, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrderService)(nil).GetOrderById), id, companyId, status, isDeleted, isActive)
}

// UpdateOrder mocks base method.
func (m *MockOrderService) UpdateOrder(id, companyId int, status, isDeleted, isActive string, order models.OrderUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", id, companyId, status, isDeleted, isActive, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderServiceMockRecorder) UpdateOrder(id, companyId, status, isDeleted, isActive, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderService)(nil).UpdateOrder), id, companyId, status, isDeleted, isActive, order)
}
