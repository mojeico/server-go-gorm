// Code generated by MockGen. DO NOT EDIT.
// Source: group_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trucktrace/internal/models"
)

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupService) Create(group models.Groups) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupServiceMockRecorder) Create(group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupService)(nil).Create), group)
}

// Delete mocks base method.
func (m *MockGroupService) Delete(groupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupServiceMockRecorder) Delete(groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupService)(nil).Delete), groupId)
}

// GetAllGroups mocks base method.
func (m *MockGroupService) GetAllGroups() ([]models.Groups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]models.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockGroupServiceMockRecorder) GetAllGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroupService)(nil).GetAllGroups))
}

// GetAllGroupsByCompanyId mocks base method.
func (m *MockGroupService) GetAllGroupsByCompanyId(companyId string) ([]models.Groups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroupsByCompanyId", companyId)
	ret0, _ := ret[0].([]models.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroupsByCompanyId indicates an expected call of GetAllGroupsByCompanyId.
func (mr *MockGroupServiceMockRecorder) GetAllGroupsByCompanyId(companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroupsByCompanyId", reflect.TypeOf((*MockGroupService)(nil).GetAllGroupsByCompanyId), companyId)
}

// GetGroupById mocks base method.
func (m *MockGroupService) GetGroupById(groupId, companyId string) (models.Groups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", groupId, companyId)
	ret0, _ := ret[0].(models.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockGroupServiceMockRecorder) GetGroupById(groupId, companyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockGroupService)(nil).GetGroupById), groupId, companyId)
}

// Update mocks base method.
func (m *MockGroupService) Update(groupId string, groups models.GroupUpdateInput) (models.Groups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", groupId, groups)
	ret0, _ := ret[0].(models.Groups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGroupServiceMockRecorder) Update(groupId, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGroupService)(nil).Update), groupId, groups)
}
