// Code generated by MockGen. DO NOT EDIT.
// Source: driver_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/trucktrace/internal/models"
)

// MockDriverService is a mock of DriverService interface.
type MockDriverService struct {
	ctrl     *gomock.Controller
	recorder *MockDriverServiceMockRecorder
}

// MockDriverServiceMockRecorder is the mock recorder for MockDriverService.
type MockDriverServiceMockRecorder struct {
	mock *MockDriverService
}

// NewMockDriverService creates a new mock instance.
func NewMockDriverService(ctrl *gomock.Controller) *MockDriverService {
	mock := &MockDriverService{ctrl: ctrl}
	mock.recorder = &MockDriverServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverService) EXPECT() *MockDriverServiceMockRecorder {
	return m.recorder
}

// CreateDriver mocks base method.
func (m *MockDriverService) CreateDriver(driver models.Driver) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDriver", driver)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDriver indicates an expected call of CreateDriver.
func (mr *MockDriverServiceMockRecorder) CreateDriver(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDriver", reflect.TypeOf((*MockDriverService)(nil).CreateDriver), driver)
}

// DeleteDriver mocks base method.
func (m *MockDriverService) DeleteDriver(driverId, companyId int, status, isDeleted, isActive string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriver", driverId, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriver indicates an expected call of DeleteDriver.
func (mr *MockDriverServiceMockRecorder) DeleteDriver(driverId, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "DeleteDriver",
		reflect.TypeOf((*MockDriverService)(nil).DeleteDriver),
		driverId,
		companyId,
		status,
		isDeleted,
		isActive,
	)
}

// GetAllDrivers mocks base method.
func (m *MockDriverService) GetAllDrivers(status, isDeleted, isActive string) ([]models.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDrivers", status, isDeleted, isActive)
	ret0, _ := ret[0].([]models.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDrivers indicates an expected call of GetAllDrivers.
func (mr *MockDriverServiceMockRecorder) GetAllDrivers(status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDrivers", reflect.TypeOf((*MockDriverService)(nil).GetAllDrivers),
		status,
		isDeleted,
		isActive,
	)
}

// GetAllDriversByCompanyId mocks base method
func (m *MockDriverService) GetAllDriversByCompanyId(companyId int, status, isDeleted, isActive string) ([]models.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDriversByCompanyId",
		companyId,
		status,
		isDeleted,
		isActive,
	)
	ret0, _ := ret[0].([]models.Driver)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

func (mr *MockDriverServiceMockRecorder) GetAllDriversByCompanyId(companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "GetAllDriversByCompanyId",
		reflect.TypeOf((*MockDriverService)(nil).GetAllDrivers),
		companyId,
		status,
		isDeleted,
		isActive,
	)
}

// GetDriverById mocks base method.
func (m *MockDriverService) GetDriverById(driverId, companyId int, status, isDeleted, isActive string) (models.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverById", driverId, companyId, status, isDeleted, isActive)
	ret0, _ := ret[0].(models.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverById indicates an expected call of GetDriverById.
func (mr *MockDriverServiceMockRecorder) GetDriverById(driverId, companyId, status, isDeleted, isActive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverById", reflect.TypeOf((*MockDriverService)(nil).GetDriverById),
		driverId,
		companyId,
		status,
		isDeleted,
		isActive,
	)
}

// UpdateDriver mocks base method.
func (m *MockDriverService) UpdateDriver(driverId, companyId int, status, isDeleted, isActive string, driver models.DriverUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriver", driverId, companyId, status, isDeleted, isActive, driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDriver indicates an expected call of UpdateDriver.
func (mr *MockDriverServiceMockRecorder) UpdateDriver(driverId, companyId, status, isDeleted, isActive, driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock, "UpdateDriver",
		reflect.TypeOf((*MockDriverService)(nil).UpdateDriver),
		driverId,
		companyId,
		status,
		isDeleted,
		isActive,
		driver,
	)
}
